pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'shaimaamelsaadi/solar_system'
        DOCKER_CREDS = credentials('dockerhub-credentials')
        EMAIL_RECIPIENTS = 'shimaaelsaadi@gmail.com' 
        APP_IMG="${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}"
        APP_NAME='SolarApp'
        SSH_KEY=credentials('ssh_prv')
        AWS_REGION="us-east-2"
    }

    stages {
        stage('Cleanup') {
            steps {
                deleteDir()
            }
        }
        stage('Prepare Jenkins Inputs') {
            steps {
               
                echo 'Preparing Jenkins inputs...'
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'github_push', branch: 'production', url: 'https://github.com/DEPIDevOpsTeam2/DEPI-DevOps-Pipeline'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm --prefix $WORKSPACE/APP install'
            }
        }

        // stage('Run Unit Tests') {
        //     steps {
        //         script {
        //             withEnv(["MONGO_URI=mongodb+srv://superuser:SuperPassword@supercluster.d83jj.mongodb.net/superData"]) {
        //                 sh 'npm --prefix $WORKSPACE/APP test --verbose'
        //             }
        //         }
        //     }
        // }

        // stage('Run Code Coverage') {
        //     steps {
        //         withEnv(["MONGO_URI=mongodb+srv://superuser:SuperPassword@supercluster.d83jj.mongodb.net/superData"]) {
        //             sh 'npm --prefix $WORKSPACE/APP run coverage'
        //             publishHTML target: [
        //                 reportName: 'Coverage Report',
        //                 reportDir: 'coverage',
        //                 reportFiles: 'index.html',
        //                 alwaysLinkToLastBuild: true
        //             ]
        //         }
        //     }
        // }

        stage('Prepare Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE
                    IMAGE_EXISTS=$(docker images -q $DOCKER_HUB_REPO:$BUILD_NUMBER)

                    if [ -n "$IMAGE_EXISTS" ]; then
                        echo "Docker image exists. Deleting existing image..."
                        docker rmi -f $DOCKER_HUB_REPO:$BUILD_NUMBER
                    else
                        echo "Docker image does not exist. Proceeding to build a new image..."
                    fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE/APP
                    docker build -t $DOCKER_HUB_REPO:$BUILD_NUMBER .
                    '''
                }
            }
        }

        stage('docker-login') {
            steps {
                sh "docker login --username $DOCKER_CREDS_USR --password $DOCKER_CREDS_PSW"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def app = docker.image("$DOCKER_HUB_REPO:${env.BUILD_NUMBER}")
                    app.push()
                }
            }
        }

        stage('Test Docker Container') {
            steps {
                script {
                    sh "docker run -d -p 3000:3000 $DOCKER_HUB_REPO:$env.BUILD_NUMBER"
                    sh 'sleep 5'
                    sh 'curl http://localhost:3000'
                }
            }
        }

        stage('Provisioning') {
            steps {
                script {
                   
                    dir('./Terraform') {
                        sh 'terraform init'
                       withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding', 
                            credentialsId: 'AWS_CREDS', 
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]]) {
                            sh '''
                            terraform refresh \
                            -var "aws_access_key=$AWS_ACCESS_KEY_ID" \
                            -var "aws_secret_key=$AWS_SECRET_ACCESS_KEY" \
                            -var "aws_region=${AWS_REGION}"
                            
                            terraform apply -auto-approve \
                            -var "aws_access_key=$AWS_ACCESS_KEY_ID" \
                            -var "aws_secret_key=$AWS_SECRET_ACCESS_KEY" \
                            -var "aws_region=${AWS_REGION}"
                            '''
                            env.TERRAFORM_OUTPUT = sh(script: 'terraform output -json', returnStdout: true).trim()
                        }
                    }
                }
            }
        }
        stage('Check Terraform Output') {
             steps {
                script {
                    echo "Terraform Output: ${env.TERRAFORM_OUTPUT}"
        }
    }
}


//         stage('ssh') {
//             steps {
//                 script {

//                          sh '''
//                         USER=$(whoami)
//                         ssh_dir="/home/${USER}/.ssh"
//                         ssh_prv="${ssh_dir}/id_aws_ec2"
//                         ssh_pub="${ssh_dir}/id_aws_ec2.pub"

//                         # Create the .ssh directory if it doesn't exist
//                            mkdir -p ${ssh_dir}

//                         # Set the correct permissions on the .ssh directory
//                         chmod 700 ${ssh_dir}

//                         # Check for the private key, create if not exists
//                         if [  -e "$ssh_prv" ]; then
//                             rm ${ssh_prv}  
//                             ls ${ssh_dir} 
//                         fi

//                         # Check for the public key, create if not exists
//                         if [ -e "$ssh_pub" ]; then
//                             rm ${ssh_pub}
//                              ls ${ssh_dir} 
//                         fi
//                         ls ${ssh_dir} 
//                         cp -r ./ssh/*  ${ssh_dir}/
//                         ls ${ssh_dir} 
//                         chmod 600 ${ssh_prv}
//                         chmod 644 ${ssh_pub} 

//                          '''
//         }
//     }
// }
        stage('Configuration') {
            steps {
                script {
                    dir('./Ansible') {
                      
                        def terraformOutputJson = readJSON text: env.TERRAFORM_OUTPUT
                        env.HOST_IP = terraformOutputJson.host_ip.value
                        env.MONGO_URI = terraformOutputJson.mongo_uri.value
                        env.HOST_USER = terraformOutputJson.host_user.value
                        env.HOST_BECOME_PASS = terraformOutputJson.host_become_pass.value
                        env.HOST_SSH_PRV_KEY="/home/jenkins/.ssh/id_aws_ec2"
                        env.MONGO_DB="solar"
                        env.MONGO_COLLECTION="plantes"
                        sh """
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        ansible-galaxy collection install community.docker
                        ansible-playbook -i inventory.yml\
                        playbook.yml
                        """
                    }
                }
            }
        }
    }

    post {
        failure {
            mail to: "${EMAIL_RECIPIENTS}",
                subject: "❌ Build Failed: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                body: """<p>Oops! The build has failed.</p>
                         <p><strong>Job:</strong> ${JOB_NAME}</p>
                         <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                         <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                mimeType: 'text/html'
        }

        unstable {
            mail to: "${EMAIL_RECIPIENTS}",
                subject: "⚠️ Build Unstable: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                body: """<p>The build is unstable.</p>
                         <p><strong>Job:</strong> ${JOB_NAME}</p>
                         <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                         <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                mimeType: 'text/html'
        }
    }
}
