pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'shaimaamelsaadi/solar_system'
        DOCKER_CREDS = credentials('dockerhub-credentials')
        EMAIL_RECIPIENTS = 'shimaaelsaadi@gmail.com' 
        APP_IMG="${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}"
        APP_NAME='solar-app'
        SSH_KEY=credentials('ssh_prv')
        AWS_REGION="us-east-2"
    }

    stages {
        stage('Cleanup') {
            steps {
                deleteDir()
            }
        }
        stage('Prepare Jenkins Inputs') {
            steps {
               
                echo 'Preparing Jenkins inputs...'
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'github_push', branch: 'production', url: 'https://github.com/DEPIDevOpsTeam2/DEPI-DevOps-Pipeline'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm --prefix $WORKSPACE/APP install'
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    withEnv(["MONGO_URI=mongodb://admin:admin@localhost:27017/",
                             "IS_TEST=true"]) {
                               
                        sh '''
                        npm --prefix $WORKSPACE/APP test --verbose
                        '''
                    }
                }
            }
        }

        stage('Run Code Coverage') {
            steps {
               withEnv(["MONGO_URI=mongodb://admin:admin@localhost:27017/",
                             "IS_TEST=true"])  {
                    sh 'npm --prefix $WORKSPACE/APP run coverage'
                    publishHTML target: [
                        reportName: 'Coverage Report',
                        reportDir: 'coverage',
                        reportFiles: 'index.html',
                        alwaysLinkToLastBuild: true
                    ]
                }
            }
        }

        stage('Prepare Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE
                    IMAGE_EXISTS=$(docker images -q $DOCKER_HUB_REPO:$BUILD_NUMBER)

                    if [ -n "$IMAGE_EXISTS" ]; then
                        echo "Docker image exists. Deleting existing image..."
                        docker rmi -f $DOCKER_HUB_REPO:$BUILD_NUMBER
                    else
                        echo "Docker image does not exist. Proceeding to build a new image..."
                    fi
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    cd $WORKSPACE/APP
                    docker build -t $DOCKER_HUB_REPO:$BUILD_NUMBER .
                    '''
                }
            }
        }

        stage('docker-login') {
            steps {
                sh "docker login --username $DOCKER_CREDS_USR --password $DOCKER_CREDS_PSW"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def app = docker.image("$DOCKER_HUB_REPO:${env.BUILD_NUMBER}")
                    app.push()
                }
            }
        }

        // stage('Test Docker Container') {
        //     steps {
        //         script {
        //             sh "docker run -d -p 3000:3000 $DOCKER_HUB_REPO:$env.BUILD_NUMBER"
        //             sh 'sleep 5'
        //             sh 'curl http://localhost:3000'
        //         }
        //     }
        // }

        stage('Provisioning') {
            steps {
                script {
                   
                    dir('./Terraform') {
                        sh 'terraform init'
                       withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding', 
                            credentialsId: 'AWS_CREDS', 
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                            ]]) {
                            sh '''
                            terraform refresh \
                            -var "aws_access_key=$AWS_ACCESS_KEY_ID" \
                            -var "aws_secret_key=$AWS_SECRET_ACCESS_KEY" \
                            -var "aws_region=${AWS_REGION}"
                            
                            terraform apply -auto-approve \
                            -var "aws_access_key=$AWS_ACCESS_KEY_ID" \
                            -var "aws_secret_key=$AWS_SECRET_ACCESS_KEY" \
                            -var "aws_region=${AWS_REGION}"
                            '''
                            env.TERRAFORM_OUTPUT = sh(script: 'terraform output -json', returnStdout: true).trim()
                        }
                    }
                }
            }
        }
        stage('Check Terraform Output') {
             steps {
                script {
                    echo "Terraform Output: ${env.TERRAFORM_OUTPUT}"
                    // Execute Terraform output command and capture the output
                    def output = sh(script: 'terraform output -json', returnStdout: true).trim()
                    def json = readJSON(text: output)

                    // Set environment variables from Terraform outputs
                    env.HOST_IP            = json.host_ip.value
                    env.HOST_USER          = json.host_user.value
                    env.HOST_BECOME_PASS   = json.host_become_pass.value
                    env.HOST_SSH_PRV_KEY  = json.host_ssh_prv_key.value
                    env.MONGO_URI          = json.mongo_uri.value
                    //env.ANSIBLE_HOST_KEY_CHECKING = 'False'  // Disable host key checking
                }
            }
        }

        stage('Ansible Playbook Execution') {
            steps {
                script {
                    dir('./Ansible') {
                        
                        ansiblePlaybook(
                            credentialsId: 'ssh_private_key',    // ID of the credentials to use
                            inventory: 'inventory.yml', // Path to the inventory file
                            playbook: 'playbook.yml',       // Path to the Ansible playbook
                            hostKeyChecking: false,
                            colorized: true,
                            extraVars: [
                                    app_name: env.APP_NAME,
                                    app_img: env.APP_IMG,
                                    mongo_uri: env.MONGO_URI,
                                    ansible_host: env.HOST_IP
                                ]
                        )
                      
                        // def terraformOutputJson = readJSON text: env.TERRAFORM_OUTPUT
                        // def host_ip = terraformOutputJson.host_ip.value
                        // def mongo_uri = terraformOutputJson.mongo_uri.value
                        // def host_user = terraformOutputJson.host_user.value
                        // def host_become_pass = terraformOutputJson.host_become_pass.value
                        // def host_ssh_prv_key="/home/jenkins/.ssh/id_aws_ec2"
                        // sh """
                        // export ANSIBLE_HOST_KEY_CHECKING=False
                        // export HOST_IP=${host_ip}
                        // export MONGO_URI=${mongo_uri}
                        // export HOST_USER=${host_user}
                        // export HOST_SSH_PRV_KEY=${host_ssh_prv_key}
                        // export HOST_BECOME_PASS=${host_become_pass}
                        // printenv
                        // echo "\$APP_NAME"
                        // echo "\$APP_IMG"
                        // echo "\$HOST_IP"
                        // echo "\$MONGO_URI"
                        // echo "\$HOST_USER"
                        // echo "\$HOST_SSH_PRV_KEY"
                        // echo "\$HOST_BECOME_PASS"

                        // ansible-playbook -i inventory.yml playbook.yml
                        // """
                    }
                }
            }
        }
    }

    post {
        failure {
            mail to: "${EMAIL_RECIPIENTS}",
                subject: "❌ Build Failed: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                body: """<p>Oops! The build has failed.</p>
                         <p><strong>Job:</strong> ${JOB_NAME}</p>
                         <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                         <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                mimeType: 'text/html'
        }

        unstable {
            mail to: "${EMAIL_RECIPIENTS}",
                subject: "⚠️ Build Unstable: ${JOB_NAME} - Build #${BUILD_NUMBER}",
                body: """<p>The build is unstable.</p>
                         <p><strong>Job:</strong> ${JOB_NAME}</p>
                         <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                         <p>Check the console output at <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                mimeType: 'text/html'
        }
    }
}
