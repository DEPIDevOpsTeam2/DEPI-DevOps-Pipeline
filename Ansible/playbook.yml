---
- name: Provision EC2 Instance
  hosts: all
  become: true

  vars:
    app_name: "{{ lookup('env', 'APP_NAME') }}"
    app_img: "{{ lookup('env', 'APP_IMG') }}"
    mongo_uri: "{{ lookup('env', 'MONGO_URI') }}"
    mongo_db: "{{ lookup('env', 'MONGO_DB') }}"
    mongo_collection: "{{ lookup('env', 'MONGO_COLLECTION') }}"
    bucket_name: "{{ lookup('env', 'S3_BUCKET_NAME') }}"
    mongo_access_key: "{{ lookup('env', 'S3_MONGO_ACCESS_KEY') }}" # The S3 object key
    mongo_db_key: "{{ lookup('env', 'S3_MONGO_DB_KEY') }}" # The S3 object key
    download_path: "/usr/local/" # Local path to save the object
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    venv_path: /opt/myenv # Path to the virtual environment

  tasks:
    - name: Update APT package cache
      apt:
        update_cache: yes

    - name: Ensure target directory exists
      file:
        path: "{{ download_path }}{{ app_name }}"
        state: directory
        mode: "0755"

    - name: Check if Docker is installed
      command: docker --version
      register: docker_installed
      ignore_errors: true

    - name: Install Docker on Debian/Ubuntu
      apt:
        name: docker.io
        state: present
      when: docker_installed.rc != 0
      tags: docker

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      when: docker_installed.rc != 0
      tags: docker
      register: docker_service_started

    # - name: Debug docker_service_started
    #   debug:
    #     var: docker_service_started

    - name: Create Docker container if it does not exist
      docker_container:
        name: "{{ app_name }}"
        image: "{{ app_img }}" # img:tag
        state: started
        restart_policy: unless-stopped
        ports:
          - 3000:3000
        volumes:
          - "{{ download_path }}{{ app_name }}:/usr/app"
        env:
          MONGO_URI: "{{ mongo_uri }}"
          PEM_FILE: "/usr/app/{{ mongo_access_key }}"
          MONGO_DB: "{{ mongo_db }}"
          MONGO_COLLECTION: "{{ mongo_collection }}"
          MONGO_FILE: "/usr/app/{{ mongo_db_key }}"

    - name: Ensure Python 3 is installed
      apt:
        name: python3
        state: present
        update_cache: yes

    - name: Ensure pip is installed
      apt:
        name: python3-pip
        state: present

    - name: Ensure python3-venv is installed
      apt:
        name: python3-venv
        state: present

    - name: Create a Python virtual environment
      command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}"

    - name: Install pip packages in the virtual environment
      command: "{{ venv_path }}/bin/pip install boto3 packaging pymongo requests"

    - name: Set the Python interpreter to the virtual environment
      set_fact:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Download mongo access PEM file from S3
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        object: "{{ mongo_access_key }}"
        dest: "{{ download_path }}{{ app_name }}/{{ mongo_access_key }}"
        mode: get
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}" # Optional: specify if needed
      register: s3_pem_download

    # - name: Display pem download result
    #   debug:
    #     var: s3_pem_download

    - name: Download mongo data file from S3
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        object: "{{ mongo_db_key }}"
        dest: "{{ download_path }}{{ app_name }}/{{ mongo_db_key }}"
        mode: get
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}" # Optional: specify if needed
      register: s3_mongo_db_download
