---
- name: EC2 Instance Configration
  hosts: all
  become: true

  vars:
    app_name: "{{ lookup('env', 'APP_NAME') }}"
    app_img: "{{ lookup('env', 'APP_IMG') }}"
    mongo_uri: "{{ lookup('env', 'MONGO_URI') }}"
    mongo_db: "{{ lookup('env', 'MONGO_DB') }}"
    mongo_collection: "{{ lookup('env', 'MONGO_COLLECTION') }}"
    bucket_name: "{{ lookup('env', 'S3_BUCKET_NAME') }}"
    mongo_access_key: "{{ lookup('env', 'S3_MONGO_ACCESS_KEY') }}" # The S3 object key
    mongo_db_key: "{{ lookup('env', 'S3_MONGO_DB_KEY') }}" # The S3 object key
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    venv_path: /opt/myenv # Path to the virtual environment
    docker_path: /usr/app

  tasks:
    - name: Update APT package cache
      apt:
        update_cache: yes

    - name: Prepare Docker
      block:
        - name: Check if Docker is installed
          command: docker --version
          register: docker_installed
          ignore_errors: true

        - name: Install Docker on Debian/Ubuntu
          apt:
            name: docker.io
            state: present
          when: docker_installed.rc != 0
          tags: docker

        - name: Start Docker service
          service:
            name: docker
            state: started
            enabled: yes
          when: docker_installed.rc != 0
          tags: docker
          register: docker_service_started

        - name: Check if the Docker container exists
          command: docker ps -q -f name={{ app_name }}
          register: existing_container_id
          ignore_errors: true

        - name: Stop the existing container if it exists
          docker_container:
            name: "{{ app_name }}"
            state: stopped
          when: existing_container_id.stdout != ""

        - name: Remove the existing container if it exists
          docker_container:
            name: "{{ app_name }}"
            state: absent
          when: existing_container_id.stdout != ""
        # - name: Debug docker_service_started
        #   debug:
        #     var: docker_service_started

        - name: Create Docker container if it does not exist
          docker_container:
            name: "{{ app_name }}"
            image: "{{ app_img }}" # img:tag
            state: started
            recreate: true
            restart_policy: unless-stopped
            ports:
              - "3000:3000"
            env:
              MONGO_URI: "{{ mongo_uri }}"
              S3_MONGO_ACCESS_KEY: "{{ docker_path }}/{{ mongo_access_key }}"
              MONGO_DB: "{{ mongo_db }}"
              MONGO_COLLECTION: "{{ mongo_collection }}"
              S3_MONGO_DB_KEY: "{{ docker_path }}/{{ mongo_db_key }}"
          register: container_status

        - name: Copy pem file into the container with owner, group, and mode set
          community.docker.docker_container_copy_into:
            container: "{{ app_name }}"
            path: "{{ mongo_access_key }}"
            container_path: "{{ docker_path }}/{{ mongo_access_key }}"
            owner_id: 0 # root
            group_id: 0 # root
            mode: 0755 # readable and executable by all users, writable by root

        - name: Copy db file into the container with owner, group, and mode set
          community.docker.docker_container_copy_into:
            container: "{{ app_name }}"
            path: "{{ mongo_db_key }}"
            container_path: "{{ docker_path }}/{{ mongo_db_key }}"
            owner_id: 0 # root
            group_id: 0 # root
            mode: 0755 # readable and executable by all users, writable by root
