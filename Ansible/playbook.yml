---
- name: EC2 Instance Configration
  hosts: all
  become: true
  gather_facts: false

  vars:
    app_name: "{{ lookup('env', 'APP_NAME') }}"
    app_img: "{{ lookup('env', 'APP_IMG') }}"
    mongo_uri: "{{ lookup('env', 'MONGO_URI') }}"
    mongo_db: "{{ lookup('env', 'MONGO_DB') }}"
    mongo_collection: "{{ lookup('env', 'MONGO_COLLECTION') }}"
    mongo_pem_file: global-bundle.pem
    mongo_db_file: superData.planets.json
    docker_path: /usr/app

  tasks:
    - name: Check if the file exists
      stat:
        path: "{{ docker_path }}/{{ mongo_pem_file }}" # Specify the path to the file
      register: file_stat

    - name: Create the directory for uploaded files
      file:
        path: "{{ docker_path }}" # Specify the path where you want to create the directory
        state: directory
        mode: "0755"
      when: not file_stat.stat.exists

    - name: Copy mongo_pem_file.txt to the remote host
      copy:
        src: files/{{ mongo_pem_file }} # Path relative to playbook.yml
        dest: "{{ docker_path }}/{{ mongo_pem_file }}" # Destination path on the remote host
      when: not file_stat.stat.exists

    - name: Copy mongo_db_file.txt to the remote host
      copy:
        src: files/{{ mongo_db_file }} # Path relative to playbook.yml
        dest: "{{ docker_path }}/{{ mongo_db_file }}" # Destination path on the remote host
      when: not file_stat.stat.exists

    - name: Prepare Docker
      block:
        - name: Check if Docker is installed
          command: docker --version
          register: docker_installed
          ignore_errors: true

        - name: Install Docker on Debian/Ubuntu
          apt:
            name: docker.io
            state: present
          when: docker_installed.rc != 0
          tags: docker

        - name: Start Docker service
          service:
            name: docker
            state: started
            enabled: yes
          when: docker_installed.rc != 0
          tags: docker
          register: docker_service_started

        - name: Check if the Docker container exists
          command: docker ps -q -f name={{ app_name }}
          register: existing_container_id
          ignore_errors: true

        - name: Stop the existing container if it exists
          docker_container:
            name: "{{ app_name }}"
            state: stopped
          when: existing_container_id.stdout != ""

        - name: Remove the existing container if it exists
          docker_container:
            name: "{{ app_name }}"
            state: absent
          when: existing_container_id.stdout != ""

        - name: Create Docker container if it does not exist
          docker_container:
            name: "{{ app_name }}"
            image: "{{ app_img }}" # img:tag
            state: started
            recreate: true
            restart_policy: unless-stopped
            ports:
              - "3000:3000"
            env:
              MONGO_URI: "{{ mongo_uri }}"
              S3_mongo_pem_file: "{{ docker_path }}/{{ mongo_pem_file }}"
              MONGO_DB: "{{ mongo_db }}"
              MONGO_COLLECTION: "{{ mongo_collection }}"
              S3_mongo_db_file: "{{ docker_path }}/{{ mongo_db_file }}"
          register: container_status

        - name: Copy pem file to Docker container
          command: docker cp "{{ docker_path }}/{{ mongo_pem_file }}" {{ app_name }}:{{ docker_path }}/{{ mongo_pem_file }}

        - name: Copy db file to Docker container
          command: docker cp "{{ docker_path }}/{{ mongo_db_file }}" {{ app_name }}:{{ docker_path }}/{{ mongo_db_file }}
